% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_power.R
\name{power_wilcox_test}
\alias{power_wilcox_test}
\title{Computes power for wilcox.test for ordinal responses with a small number of levels.}
\usage{
power_wilcox_test(
  sample_size,
  effect_size,
  num_levels,
  p1,
  p2,
  power_only = TRUE,
  ...
)
}
\arguments{
\item{sample_size}{Number of samples in each population}

\item{effect_size}{Vargha and Delaney's A: P(X > Y) + 1/2 P(X == Y)}

\item{num_levels}{The number of levels in the response}

\item{p1}{Optional probability distribution in population 1. Should be length num_levels. Defaults to random.}

\item{p2}{Optional probability distribution in population 2. Should be length num_levels. Defaults to random.}

\item{power_only}{Return only the powers}
}
\value{
Estimate of power from wilcox.test in four scenarios: the p1 and p2 given as arguments, unbalanced p1 and p2, balanced p1 and p2, and a noether estimate.

If `power_only` is FALSE, then it returns p1, p2 the effect size, and any messages
from the constrained optimization problem of finding p1 and p2 for each of the first
three power estimates.
}
\description{
This function will estimate the power for wilcox.test for several different scenarios. It
will estimate power for the probability distributions of the populations provided
by the user, for a balanced and an unbalanced probability distribution of the
population, and it will also compute the Noether power estimate.
}
\details{
If p1 and p2 are not provided, then the function will choose semi-random values
for p1 and p2 that have the desired effect size. If p1 and p2 are provided without
an effect size, then the effect size is taken to be that implied by p1 and p2. If p1, p2
and an effect size are all given, but are not consistent, then p1 and p2 are modified to
have the given effect size.

Other arguments can be included that will be passed on include num_replicate, which has
default of 10000 and alpha, which has a default of .05.
}
\examples{
power_wilcox_test(sample_size = 40)
power_wilcox_test(sample_size = 30, p1 = c(1, .2), p2 = c(1, .01))
}
